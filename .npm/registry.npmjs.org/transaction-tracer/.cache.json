{"_id":"transaction-tracer","_rev":"4-0ba38a3e8dac675a32b3c7b063e7f0ed","name":"transaction-tracer","description":"A lightweight transaction tracing signaller. Does almost nothing if you're not tracing.","dist-tags":{"latest":"1.1.0"},"versions":{"1.0.0":{"name":"transaction-tracer","version":"1.0.0","description":"A lightweight transaction tracing signaller. Does almost nothing if you're not tracing.","main":"transaction_tracer.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"node test/"},"keywords":["transaction","tracing","debugging","profiling"],"author":{"name":"Bryce B. Baril"},"license":"MIT","devDependencies":{"tape":"^2.14.0"},"dependencies":{"eenano":"^1.0.0","seqid":"^1.0.0"},"repository":{"type":"git","url":"git@github.com:brycebaril/transaction-tracer.git"},"bugs":{"url":"https://github.com/brycebaril/transaction-tracer/issues"},"homepage":"https://github.com/brycebaril/transaction-tracer","gitHead":"6bfed1044793fcd43e7532af2a2c1e3cb948fd6a","_id":"transaction-tracer@1.0.0","_shasum":"e6ac5e0a339c9c71f9c12dd45baa889d0c5d5b84","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"bryce","email":"bryce@ravenwall.com"},"maintainers":[{"name":"bryce","email":"bryce@ravenwall.com"}],"dist":{"shasum":"e6ac5e0a339c9c71f9c12dd45baa889d0c5d5b84","tarball":"https://registry.npmjs.org/transaction-tracer/-/transaction-tracer-1.0.0.tgz"}},"1.1.0":{"name":"transaction-tracer","version":"1.1.0","description":"A lightweight transaction tracing signaller. Does almost nothing if you're not tracing.","main":"transaction_tracer.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"node test/"},"keywords":["transaction","tracing","debugging","profiling"],"author":{"name":"Bryce B. Baril"},"license":"MIT","devDependencies":{"tape":"~2.14.0"},"dependencies":{"eenano":"~1.0.0","seqid":"~1.0.0"},"repository":{"type":"git","url":"git@github.com:brycebaril/transaction-tracer.git"},"bugs":{"url":"https://github.com/brycebaril/transaction-tracer/issues"},"homepage":"https://github.com/brycebaril/transaction-tracer","_id":"transaction-tracer@1.1.0","dist":{"shasum":"9919a5e4e6a5635f4c46d8b0aad6e97fe3e3b98b","tarball":"https://registry.npmjs.org/transaction-tracer/-/transaction-tracer-1.1.0.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"bryce","email":"bryce@ravenwall.com"},"maintainers":[{"name":"bryce","email":"bryce@ravenwall.com"}]}},"readme":"transaction-tracer\n=====\n\n[![NPM](https://nodei.co/npm/transaction-tracer.png)](https://nodei.co/npm/transaction-tracer/)\n\n`transaction-tracer` is an extremely lightweight transaction tracing tool for helping you trace things that cross the event loop without having to use wrappers (\"monkeypatching\").\n\nIt provides you with three events you can emit and listen to -- `start`, `continue`, and `end`. When you `start` a transaction, you are provided with an id for that transaction.\n\nThis id then needs to be provided to `continue` or `end` events in order to later match up these events to tie the traces together.\n\nIt is designed to be as lightweight as possible, such that you can leave the tracing code in even if nothing is listening to the events with very little overhead. If there are no listeners, the overhead for a tracing event is:\n\n```\n  function call (e.g. tx.start())\n  (for start only) function call & one integer increment & one bitwise integer operation\n  function call (object constructor)\n  function call (noop if no listeners)\n```\nIf there are listeners for the tracing events, the overhead will likely be dominated by the code to track the tracing.\n\nThe purpose of this library is as a straw-man proposal for a unified transaction tracing interface that is easy for transaction tracing libraries to use in common that can be easily mirrored by other tracing interfaces (provided by core?) for a more cohesive experience.\n\nIdeally this would enable module authors to add custom instrumentation to their code with minimal overhead that would be vendor non-specific for how any tracing is measured.\n\nThere are still some TBDs here, such as what metadata could be sent to provide a consistent and useful interface from module-to-module.\n\nUsage Example\n---\n```javascript\n// to enable transactions, simply require transaction-tracer\n// if it is re-required in separate flies, the same tracer will be provided.\nvar tx = require(\"transaction-tracer\")\n\ntx.onStart(console.log)\ntx.onContinue(console.log)\ntx.onEnd(console.log)\n\nvar id = tx.start(\"foo\") // {id: 1234, metadata: \"foo\"}\ntx.continue(id, \"123\")  // {id: 1234, metadata: \"123\"}\ntx.continue(id, \"456\")  // {id: 1234, metadata: \"456\"}\nsetTimeout(function () {\n  tx.end(id, \"bar\")  // {id: 1234, metadata: \"bar\"}\n}, 500)\n```\n\nA more complicated example of a very simple tracer is in the examples/ folder.\n\nThis example traces two types of \"transactions\" -- `http.request()` calls, and a `setTimeout` with the same tracing code.\n\nThe timing and logging is all neatly handled inside the tracing listeners, and the asynchronous transactions simply need to let it know when it is `start`ing or `end`ing.\n\nNotice the tracer in examples/ is *not* a production-quality tracer and has a few issues (e.g. it leaks transactions) and contrivances (intentionally overcomplicated) that shouldn't be emulated in production code.\n\nAPI\n===\n\n`var tx = require(\"transaction-tracer\")`\n---\n\nInstantiates or returns the already instantiated transaction tracer object.\n\n`var id = tx.start([metadata])`\n---\n\nStart a transaction, with a transaction `id` returned.\n\n`tx.continue(id[, metadata])`\n---\n\nMark a continuation point for a transaction.\n\n`tx.end(id[, metadata])`\n---\n\nMark the endpoint for a transaction.\n\n`tx.onStart(handler)`\n---\n\nCalls `handler` whenever a transaction starts.\n\n`tx.onContinue(handler)`\n---\n\nCalls `handler` whenever a transaction continuation event happens.\n\n`tx.onEnd(handler)`\n---\n\nCalls `handler` whenever a transaction ends.\n\nLICENSE\n=======\n\nMIT\n","maintainers":[{"name":"bryce","email":"bryce@ravenwall.com"}],"time":{"modified":"2014-08-19T18:21:42.802Z","created":"2014-08-18T06:32:02.113Z","1.0.0":"2014-08-18T06:32:02.113Z","1.1.0":"2014-08-19T18:21:42.802Z"},"homepage":"https://github.com/brycebaril/transaction-tracer","keywords":["transaction","tracing","debugging","profiling"],"repository":{"type":"git","url":"git@github.com:brycebaril/transaction-tracer.git"},"author":{"name":"Bryce B. Baril"},"bugs":{"url":"https://github.com/brycebaril/transaction-tracer/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"W/\"53f395b6-1a12\"","_lastModified":"Tue, 19 Aug 2014 18:21:42 GMT"}